_gat_completions()
{
    local cur previous OPTS
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    previous=${COMP_WORDS[COMP_CWORD-1]}
    TREES1="$(for f in $(ls -d .gat/worktrees/* 2>/dev/null ) ; do basename $f ; done ;)"
    TREES2="$(for f in $(ls -d ../worktrees/* 2>/dev/null ) ; do basename $f ; done ;)"
    OPTS="create
          list
          build
          run-local
          run-remote
          push
          dockerfile
	  sendgrid
          $TREES1
          $TREES2"
    if [[ $previous = '--dockerfile' ]]; then
        COMPREPLY=( $(compgen -o filenames -A file -- $cur) )
    else
	COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
    fi
    return 0
}

if [ -n "$BASH_VERSION" ]; then
  complete -F _gat_completions gat
fi

function gat() {
  local output
  local commands
  local args
  local key
  local project
  local zone
  local region
  args=()
  commands=("create" "test" "edit" "list" "build" "run-remote" "run-local" "push" "help" "registry" "dockerfile" "sendgrid")
  while [[ $# -gt -0 ]] ; do
      key=$1
      case "$key" in
	  --project)
	      project=$2
	      shift
	      shift
	      ;;
	  --zone)
	      zone=$2
	      shift
	      shift
	      ;;
	  --region)
	      region=$2
	      shift
	      shift
	      ;;
	  *)
              args+=("$key")
	      shift
	      ;;
      esac
  done
  zone=${zone:-$(gcloud config get-value compute/zone)}
  region=${region:-$(gcloud config get-value compute/region)}
  project=${project:-$(gcloud config get-value core/project)}
  if [ "${#args[@]}" -eq 1 ] && [[ ! " ${commands[@]} " =~ " ${args[0]} " ]] ; then
      args=(--project $project --zone $zone --region $region edit "${args[@]}")
  else
      args=(--project $project --zone $zone --region $region "${args[@]}")
  fi
  output=$(GOOGLE_APPLICATION_CREDENTIALS=${GAT_APPLICATION_CREDENTIALS} $GOPATH/bin/gat "${args[@]}")
  if [ $? = 7 ]; then
    eval "$output"
  else
    echo "$output"
    return $?
  fi
}
