_gat_completions()
{
    local cur previous OPTS
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    previous=${COMP_WORDS[COMP_CWORD-1]}
    TREES1="$(for f in $(ls -d .gat/worktrees/* 2>/dev/null ) ; do basename $f ; done ;)"
    TREES2="$(for f in $(ls -d ../worktrees/* 2>/dev/null ) ; do basename $f ; done ;)"
    OPTS="master
          version
          vendor
          create
          list
          build
          run-local
          run-remote
          push
          dockerfile
	  sendgrid
          $TREES1
          $TREES2"
    if [ $previous = '--dockerfile' ] || [ $previous = 'dockerfile' ] ; then
        COMPREPLY=( $(compgen -o filenames -A file -- $cur) )
    else
	COMPREPLY=( $(compgen -W "${OPTS[*]}" -- $cur) )
    fi
    return 0
}

if [ -n "$BASH_VERSION" ]; then
  complete -F _gat_completions gat
fi

function gat() {
  local output
  local commands
  local args
  local key
  local project
  local zone
  local region
  local toml
  local vendor

  toml="${XDG_CONFIG_HOME:-$HOME}/.config/gat/config.toml"
  if [ ! -r "$toml" ]; then
      mkdir -p $(dirname $toml)
      if which aws >/dev/null ; then
          printf "vendor = \"aws\"\n" > $toml
      elif which gcloud >/dev/null ; then
          printf "vendor = \"gce\"\n" > $toml
      fi
  fi
  vendor=$(egrep "^ *vendor *=" $toml | awk '{ print $3 }' | sed "s/\"//g")
  args=()
  commands=("master" "version" "vendor" "create" "test" "log" "edit" "list" "build" "run-remote" "run-local" "push" "help" "registry" "dockerfile" "sendgrid")
  while [[ $# -gt -0 ]] ; do
      key=$1
      case "$key" in
	  --project)
	      project=$2
	      shift
	      shift
	      ;;
	  --zone)
	      zone=$2
	      shift
	      shift
	      ;;
	  --region)
	      region=$2
	      shift
	      shift
	      ;;
	  *)
              args+=("$key")
	      shift
	      ;;
      esac
  done
  if [ ${vendor:-} = "aws" ]; then
      region=$(aws configure get region 2>/dev/null)
      zone="-"
      project="-"
  elif [ ${vendor:-} = "gce" ]; then
      region=${region:-$(gcloud config get-value compute/region 2>/dev/null || true)}
      zone=${zone:-$(gcloud config get-value compute/zone || true)}
      if [ -z $zone ]; then return -1; fi
      project=${project:-$(gcloud config get-value core/project || true)}
      if [ -z $project ]; then return -1; fi
  fi
  if [ -z $region ]; then return -1; fi
  cmd=""
  if [ "${#args[@]}" -eq 1 ] && [[ ! " ${commands[@]} " =~ " ${args[0]} " ]]; then
      cmd="edit"
  elif [ "${args[0]}" = "master" -o "${args[0]}" = "create" ]; then
      cmd="${args[0]}"
      args="${args[@]:1}"
  fi
  if [ ! -z $cmd ]; then
      args=(--project $project --zone $zone --region $region $cmd "${args[@]}")
      output=$(GOOGLE_APPLICATION_CREDENTIALS=${GAT_APPLICATION_CREDENTIALS} $GOPATH/bin/gat "${args[@]}")
      if [ $? = 7 ]; then
        eval "$output"
      else
        echo "$output"
        return $?
      fi
  else
      args=(--project $project --zone $zone --region $region "${args[@]}")
      GOOGLE_APPLICATION_CREDENTIALS=${GAT_APPLICATION_CREDENTIALS} $GOPATH/bin/gat "${args[@]}"
  fi
}
